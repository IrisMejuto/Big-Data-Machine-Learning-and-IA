---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

\*

![](descargar.png)

```{r}
# Cargar datos
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

```{r}
# Librerias
library(dplyr)
library(ggplot2)
library(reshape2)
library(dendextend)
library(caret)
```

```{r}
# Muestra del dataframe
head(airbnb)
```

```{r}
# Nombre de todas columnas
colnames(airbnb)
```

```{r}
# Total de ciudades
length(unique(airbnb$City))

```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
# Selección de las columnas de mayor interés
df_madrid <- airbnb |>
  select(c('City', 'Room.Type', 'Neighbourhood', 'Accommodates', 'Bathrooms', 'Bedrooms', 'Beds',
           'Price', 'Square.Feet', 'Guests.Included', 'Extra.People',
           'Review.Scores.Rating', 'Latitude', 'Longitude')) |> 
  # Filtrar para:  City: "Madrid",Room.Type: "Entire home/apt" y Neighbourhood: no está vacio
  filter(Room.Type == "Entire home/apt" & City == "Madrid" & Neighbourhood != '') |> 
  select(-c("Room.Type", "City")) |> 
  # Eliminar las columnas
  droplevels()
```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}
# Creacción nueva columna Square.Meters
df_madrid <- df_madrid |>
  mutate(Square.Meters = Square.Feet * 0.092903)

# Check
df_madrid$Square.Meters
```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
# Porcentaje de apartamentos sin metros cuadrados(NA)
porcentaje_na <- (sum(is.na(df_madrid$Square.Meters)) / nrow(df_madrid)) * 100
print(paste("El porcentaje de apartamentos sin metros cuadrados es:", round(porcentaje_na, 2), "%"))

```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
# Porcentaje de apartamentos con 0 metros cuadrados
apartamentos_sin_na <- df_madrid[!is.na(df_madrid$Square.Meters), ]
porcentaje_ceros <- mean(apartamentos_sin_na$Square.Meters == 0) * 100


print(paste("El porcentaje de apartamentos con 0 metros cuadrados es:", round(porcentaje_ceros, 2), "%"))

```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
# Asignar NA  a los registros con 0 Square.Meters
df_madrid$Square.Meters[df_madrid$Square.Meters == 0] <- NA
```

```{r}
# Check
sum(df_madrid$Square.Meters == 0, na.rm = TRUE)
```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
# Histograma
ggplot(df_madrid, aes(x = Square.Meters)) +
  geom_histogram(binwidth = 10, fill = "blue", alpha = 0.5) +
  theme_minimal() +
  labs(title = "Metros cuadrados",
       x = "Metros cuadrados",
       y = "Frecuencia")
```

```{r}
# Cantidad de NA en la columna Square.Meters
sum(is.na(df_madrid$Square.Meters))
sum(df_madrid$Square.Meters == 0, na.rm = TRUE)
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
df_madrid$Square.Meters[df_madrid$Square.Meters < 20] <- NA

```

```{r}
# Histograma
ggplot(df_madrid, aes(x = Square.Meters)) +
  geom_histogram(binwidth = 20, fill = "blue", alpha = 0.5) +
  theme_minimal() +
  labs(title = "Metros cuadrados en apartamentos de Madrid",
       x = "Metros cuadrados",
       y = "Frecuencia")

```

```{r}
# Total NA en Square.Meters
paste("Número de NA's:", sum(is.na(df_madrid$Square.Meters)))

```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

    ```{r}
    # Agrupación por barrios con NA
    barrios_todo_na <- df_madrid |>
      group_by(Neighbourhood) |>
      summarise(num_na = sum(is.na(Square.Meters)),total_entradas = n()) |>
      filter(num_na == total_entradas)

    # Eliminamos las filas
    df_madrid <- df_madrid |>
      filter(!Neighbourhood %in% barrios_todo_na$Neighbourhood) |>
      droplevels()

    # Número de filas restantes
    print(paste("Número de filas en el dataset:", nrow(df_madrid)))
    ```

    ------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

    ```{r}
    # Test ANOVA
      # H0: Todos los barrios tienen la misma media
      # H1: No todos los barrios tienen la misma media
    test_anova <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)
    ```

    ```{r}
    summary(test_anova)
    ```

    -   El p-valor es muy bajo, por lo que rechazamos la H0, hay evidencias de que no todos los barrios tienen la misma media de metros cuadrados.

    ------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

```{r}
# Test de Tukey
tky <- TukeyHSD(test_anova)
```

```{r}
# Registro de los resultados en un dataframe
tky.result <- data.frame(tky$Neighbourhood)  

# Lista ordenada de barrios
cn <- sort(unique(df_madrid$Neighbourhood))  

# Creación matriz vacía
resm <- matrix(NA, length(cn), length(cn))   

# Asignación de nombres a las filas y columnas
rownames(resm) <- cn                         
colnames(resm) <- cn                      

# Relleno de la matriz con p-valores
resm[lower.tri(resm)] <- round(tky.result$p.adj, 4)     
resm[upper.tri(resm)] <- t(resm)[upper.tri(resm)]    
diag(resm) <- 1                                         
```

```{r}
# Visualización
dfResm <- melt(resm)
ggplot(dfResm, aes(x=Var1, y=Var2, fill=value)) +
  geom_tile(colour = "black") +
  scale_fill_gradient(low = "white", high = "steelblue") +
  ylab("Barrios") + 
  xlab("Barrios") + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        axis.text.y = element_text(size = 8))
```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es bajo significa que los barrios son diferentes, si es alto significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

    ```{r}
    # Matriz de p-valores a matriz de distancias
    distancias <- 1 - resm
    d <- as.dist(distancias)
    ```

    ```{r}
    # Clustering jerárquico
    hc <- hclust(d, method="complete")

    # Dendograma
    hcd <- as.dendrogram(hc)
    par(cex=0.3)
    plot(hcd)
    ```

------------------------------------------------------------------------

12. ¿Qué punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

    ```{r}
    # Punto de corte h=0.4
    clusters <- factor(cutree(hc, h=0.4))

    table(clusters)
    ```

------------------------------------------------------------------------

13. **Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id**

    ```{r}
    # Creación del dataframe clusters
    df_clusters <- data.frame(Neighbourhood = names(clusters),neighb_id = clusters)

    # Merge de ambos dataframe para añadir neighb_id a df_madrid
    df_madrid <- merge(df_madrid, df_clusters, by="Neighbourhood", all=T)

    # Check
    table(df_madrid$neighb_id)
    ```

------------------------------------------------------------------------

14. Vamos a crear dos grupos, uno test y otro train.

    ```{r}
    # Creación semilla
    set.seed(12345)

    # Creación Del índice para la división de los datos(70% train, 30% test)
    idx <- sample(1:nrow(df_madrid), nrow(df_madrid)*0.7)

    # Creación de los datasets
    df_madrid_train <- df_madrid[idx,]
    df_madrid_test <- df_madrid[-idx,]
    ```

    ```{r}
    # Número total de filas
    print(paste("Filas totales en df_madrid:", nrow(df_madrid)))

    # Número de filas en train y test
    print(paste("Filas en train:", nrow(df_madrid_train)))
    print(paste("Filas en test:", nrow(df_madrid_test)))

    # Porcentajes
    print(paste("Porcentaje en train:", round(nrow(df_madrid_train)/nrow(df_madrid)*100, 2), "%"))
    print(paste("Porcentaje en test:", round(nrow(df_madrid_test)/nrow(df_madrid)*100, 2), "%"))
    ```

------------------------------------------------------------------------

15. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}
# Creación el modelo con los datos de train
model <- lm(Square.Meters ~ Accommodates + Bathrooms + Bedrooms + 
           Beds + Price + Guests.Included + Extra.People + 
           Review.Scores.Rating + neighb_id, data = df_madrid_train)

# Vemos el resumen del modelo
summary(model)
```

------------------------------------------------------------------------

16. Evaluar la calidad de vuestro modelo

```{r}
cat("Interpretación del los resultados:\n\n")

cat(" - R-squared: 0.785 (78.5% de variabilidad explicada)\n")
cat(" - Modelo estadísticamente significativo (p-value < 2.2e-16)\n\n")

# Variables más significativas
cat("Bathrooms: Más significativo\n")
cat(" - Cada baño adicional aumenta ~28 metros cuadrados\n")
cat(" - p-value = 0.000321\n\n")

cat("Bedrooms: Moderado\n") 
cat(" - Cada dormitorio adicional aumenta ~11.5 metros cuadrados\n")
cat(" - p-value = 0.009451\n\n")


cat(" - Price: Relación positiva con metros cuadrados\n")
cat(" - Guests.Included: Reduce ligeramente los metros cuadrados\n")
cat(" - Review.Scores.Rating: Impacto positivo\n\n")

# Observaciones
cat(" - 3313 observaciones eliminadas por datos faltantes\n")
cat(" - Vecindarios (neighb_id) tienen impacto significativo\n")
```

```{r}
# Evaluación en datos de train
cat("Métricas en Datos de Train:\n")
predictions_train <- predict(model, df_madrid_train)
metricas_train <- postResample(pred = predictions_train, obs = df_madrid_train$Square.Meters)

cat("RMSE: ", round(metricas_train["RMSE"], 4), "\n")
cat("R-squared: ", round(metricas_train["Rsquared"], 4), "\n")
cat("MAE: ", round(metricas_train["MAE"], 4), "\n\n")

# Evaluación en datos de test
cat("Métricas en Datos de Test:\n")
predictions_test <- predict(model, df_madrid_test)
metricas_test <- postResample(pred = predictions_test, obs = df_madrid_test$Square.Meters)

cat("RMSE: ", round(metricas_test["RMSE"], 4), "\n")
cat("R-squared: ", round(metricas_test["Rsquared"], 4), "\n")
cat("MAE: ", round(metricas_test["MAE"], 4), "\n")
```

------------------------------------------------------------------------

18. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}
# Creación de un dataframe con los datos que queremos predecir
nuevo_apartamento <- data.frame(
    Accommodates = 6,
    Bathrooms = 1,
    Bedrooms = 3,
    Beds = 3,
    Price = 80,
    Review.Scores.Rating = 80,
    Guests.Included = 2,  
    Extra.People = 10,    
    neighb_id = "1"      
)

# Predicción
resultado <- predict(model, nuevo_apartamento)

cat("Los metros cuadrados predichos son:", round(resultado, 2))
```

------------------------------------------------------------------------

19. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
# Square.Meters originales
metros_originales <- df_madrid$Square.Meters

# Predicciones de todas las filas
metros_predichos <- predict(model, df_madrid)

# Reemplazo de los NA con las predicciones
df_madrid$Square.Meters[is.na(df_madrid$Square.Meters)] <- metros_predichos[is.na(metros_originales)]

cat("NA's antes de la predicción:", sum(is.na(metros_originales)), "\n")
cat("NA's después de la predicción:", sum(is.na(metros_predichos)))
```

------------------------------------------------------------------------
